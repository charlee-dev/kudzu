buildscript {
    ext.kotlin_version = '1.2.61'
    ext.orchid_version = '0.11.0'

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.com.eden:orchidPlugin:$orchid_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'com.eden.orchidPlugin'

group = "com.copper-leaf"
version = "0.1.0"

repositories {
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://dl.bintray.com/javaeden/Orchid/' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7"

    // testing
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.1.0"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.1.0"
    testCompile "io.strikt:strikt-core:0.9.0"

    // Orchid
    def orchid_version = '0.11.0'
    orchidCompile "io.github.javaeden.orchid:OrchidCore:$orchid_version"

    orchidRuntime "io.github.javaeden.orchid:OrchidCore:$orchid_version"
    orchidRuntime "io.github.javaeden.orchid:OrchidBsDoc:$orchid_version"
    orchidRuntime "io.github.javaeden.orchid:OrchidPages:$orchid_version"
    orchidRuntime "io.github.javaeden.orchid:OrchidPluginDocs:$orchid_version"
    orchidRuntime "io.github.javaeden.orchid:OrchidSearch:$orchid_version"
    orchidRuntime "io.github.javaeden.orchid:OrchidKotlindoc:$orchid_version"
}

sourceCompatibility = JavaVersion.VERSION_1_6
compileKotlin {
    kotlinOptions.jvmTarget = "1.6"
}
test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

task deploy {
    doLast {}
}

// Orchid config
//----------------------------------------------------------------------------------------------------------------------

orchid {
    version = "${project.version}"
    theme = "BsDoc"

    if (project.hasProperty('env') && project.property('env') == 'prod') {
        baseUrl = "https://copper-leaf.github.io/kudzu"
        environment = 'prod'
    } else {
        baseUrl = "http://localhost:8080"
        environment = 'debug'
    }

    args = ["githubToken ${project.hasProperty("github_token") ? project.property("github_token") : System.getenv('GITHUB_TOKEN')}"]
}
tasks.build.dependsOn orchidBuild
tasks.check.dependsOn jacocoTestReport
tasks.deploy.dependsOn orchidDeploy

// Code Coverage Reports
//----------------------------------------------------------------------------------------------------------------------
task codeCoverageReport(type: JacocoReport) {
    dependsOn test

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    sourceSets sourceSets.main

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

configurations { codacy }
dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:4.0.2'
}
task sendCoverageToCodacy(type: JavaExec) {
    dependsOn codeCoverageReport

    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l", "Java",
            "-r", "${buildDir}/reports/jacoco/report.xml",
            "-t", "${System.getenv("CODACY_PROJECT_TOKEN")}",
            "--language", "Kotlin"
    ]
}
